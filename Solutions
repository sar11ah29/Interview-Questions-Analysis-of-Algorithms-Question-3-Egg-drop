Version0: We try each floor starting from the bottom. The first floor that the egg breaks on it
is T.

Version 1:We use the binary search algorithm on the floors. First, try floor T/2. If the egg breaks, then T is equal to T/2 or smaller.
If the egg does not break, then T is greater than T/2.
We continue testing the mid-point of the subset of floors until we determine the value of T.

Version 2: We start the test at floor 0 and exponentially grow (2^t) floor number until first egg
breaks. The value of T must be between 2^t and 2^(t-1). This range can then
be searched in ~lgT tosses using version 1.

version3: We test the floors in increments of sqrt(N) starting from floor 0. When the egg breaks
on floor t, return to the previous test floor t-1 and increment by each floor.
The remaining sqrt(N) tests will be enough to check each floor between floor t-1
and t. The floor that breaks will be the value of T.

Version4: We drop the egg at floor 1, 3(1+2), 6(1+2+3), 10(1+2+3+4).
Note that 1+2+3+…+t∼ 1/2(t^2)
In total, we toss 2 sqrt (2T) times
